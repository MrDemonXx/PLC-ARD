//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            LIBRERIAS DE COMUNICACIÓM.                        │
//└──────────────────────────────────────────────────────────────────────────────┘
#include <SPI.h>
#include <Wire.h>
#include "Settimino.h"
#include <Platform.h>
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            VARIABELS GLOBALES DE COM.                        │
//└──────────────────────────────────────────────────────────────────────────────┘
word MBHR = 20;
word MbData [20];
byte mybuffer [30];
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            VARIABELS GLOBALES DE datos.                      │
//└──────────────────────────────────────────────────────────────────────────────┘
byte A;
byte B;
byte C;
byte D;
byte E; 
byte F;
byte L;
byte M;
byte N;
byte ON;
byte P; 
byte Q;
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            VARIABLES DE TIEMPO Y CICLOS                      │
//└──────────────────────────────────────────────────────────────────────────────┘
#define interval 100
unsigned long times;
//───────────────────────────────────────────────────────────────────────────────
int mInterval_1 = 750;
int mInterval_2 = 750;
int mInterval_3 = 750;
//───────────────────────────────────────────────────────────────────────────────
unsigned long startTime1 = 0;
unsigned long startTime2 = 0;
unsigned long startTime3 = 0;
//───────────────────────────────────────────────────────────────────────────────
byte timer;
byte cycle;
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            CONFIG. DE ETHERNET SHIELD                        │
//└──────────────────────────────────────────────────────────────────────────────┘
byte MAC[] = {0x90, 0xA2, 0xDA, 0x0E, 0x94, 0xB5 };
IPAddress PLC (192, 168, 0, 101);
IPAddress gateaway (192, 168, 0, 1);
IPAddress subnet (255, 255, 255, 0);
IPAddress ip (192, 168, 0, 21);
//────────────────────────────────────────────────────────────────────────────────
S7Client Client;
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            FUNCIÓN RESET ARDUINO.                            │
//└──────────────────────────────────────────────────────────────────────────────┘
void(*resetFunc)(void)=0;
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            FUNCIÓN RESET ARDUINO.                            │
//└──────────────────────────────────────────────────────────────────────────────┘
void setup() {
  // put your setup code here, to run once:
  Wire.begin(8);
  Wire.setClock(400000);
  EthernetInit(MAC, ip);
  Serial.begin(115200);
  Serial.println("1. Set Up progra");
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            DATOS QUE ENVIAREMOS AL PLC DESDE EL ARD          │
//└──────────────────────────────────────────────────────────────────────────────┘  
  MbData[0] = 0;
  MbData[1] = 0;
  MbData[2] = 0;
  MbData[3] = 0;
  MbData[4] = 0;
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            DATOS DE LECTURA DESDE EL PLC                     │
//└──────────────────────────────────────────────────────────────────────────────┘
  MbData[5] = 0;
  MbData[6] = 0;
  MbData[7] = 0;
  MbData[8] = 0;
  MbData[9] = 0;
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            DECLARACIÓN DE SALIDAS                            │
//└──────────────────────────────────────────────────────────────────────────────┘
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(5, OUTPUT);
//───────────────────────────────────────────────────────────────────────────────
  startTime1 = millis();
  startTime2 = millis();
  startTime3 = millis();
//───────────────────────────────────────────────────────────────────────────────
  for(int i; i<3; i++){
    digitalWrite(2, HIGH);
    if(millis()>times + interval){
      digitalWrite(2, LOW);
    }
  }
}
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            FUNCION BOOL PARA CONECTAR AL PLC                 │
//└──────────────────────────────────────────────────────────────────────────────┘
bool Connect(){
  int Result = Client.ConnectTo(PLC, 0, 1);
  cycle = cycle + 1;
  
  if (cycle == 10){
    resetFunc();
  }
}

void FatalError(int ErrNo){
  if(ErrNo & 0x00FF)
  Client.Disconnect();
}

void loop() {
  // put your main code here, to run repeatedly:
  while (!Client.Connected)
  {
    if (!Connect())
      delay(500);
  }  
//──────────────────────────────────────────────────────────────────────────────────  
  MbData[4] = cycle;
//──────────────────────────────────────────────────────────────────────────────────
  if (millis()> startTime1 + mInterval_1){
    cycle = cycle +1;
  }
//──────────────────────────────────────────────────────────────────────────────────
  if(bitRead(cycle, 0)){
    digitalWrite(2, HIGH);
  }else{
    digitalWrite(2, LOW);
  }
//─────────────────────────────────────────────────────────────────────────────────
  if(bitRead(MbData[0], 9)){
    digitalWrite(3, HIGH);
  }else{
    digitalWrite(3, LOW);
  }
//──────────────────────────────────────────────────────────────────────────────────
  if(bitRead(MbData[5], 9)){
    digitalWrite(5, HIGH);
  }else{
    digitalWrite(5, LOW);
  }  
//──────────────────────────────────────────────────────────────────────────────────
  L = (MbData[5]/256);
  M = MbData[5];
  N = MbData[6];
  ON = MbData[7];
  WriteToPLC();
  ReadToPLC();
}
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            ENVIAR DATOS AL PLC QUE ENVIEN AL PLC             │
//└──────────────────────────────────────────────────────────────────────────────┘
void WriteToPLC(){
  int Per = 2000;
  unsigned long Time = 0;
  //──────────────────────────────────────────────────────────────────────────────────
  int Result = Client.WriteArea(S7AreaDB, 0, 0, 16, MbData);
  //──────────────────────────────────────────────────────────────────────────────────
  if (Result == 0){
    Serial.println("OK COM PLC + ARD");
  }else{
    FatalError(Result);
    if(millis()>Time+Per){
      resetFunc();
    }
  }
}
//┌──────────────────────────────────────────────────────────────────────────────┐
//│                            RECIBIMOS LOS DATOS DEL PLC Y LO ALM EN ARD       │
//└──────────────────────────────────────────────────────────────────────────────┘
void ReadToPLC(){
  int Per  = 2000;
  unsigned long Time = 0;
  //──────────────────────────────────────────────────────────────────────────────────
  int Result = Client.ReadArea(S7AreaDB, 1, 0, 1024, mybuffer);
  MbData[1] = PDU.DATA[0];
  MbData[2] = PDU.DATA[4];
  MbData[3] = PDU.DATA[8];
  MbData[4] = PDU.DATA[10];
  //──────────────────────────────────────────────────────────────────────────────────
  if(Result !=0){
    FatalError(Result);
    if(millis()>Time+Per){
      resetFunc();
    }
  }
}
